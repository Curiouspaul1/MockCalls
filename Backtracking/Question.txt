Question:

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Solution: 
class Solution:
    d def letterCombinations(self, digits: str) -> List[str]:
        if len(digits) == 0:
            return []
        
        number_dict = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz",
        }
        combinations = []

        def backtrack(index, path):
            if len(path) == len(digits):
                combinations.append("".join(path))
                return
            
            pos_letters = number_dict[digits[index]]
            for letter in pos_letters:
                path.append(letter)
                backtrack(index+1, path)
                path.pop()
            
        backtrack(0, [])
        return combinations

 
Leetcode Link:
https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/
